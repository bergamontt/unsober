{
	"info": {
		"_postman_id": "f5142ebd-0a40-4da3-a907-c5ed4513177e",
		"name": "Unsober API Collection",
		"description": "A collection containing most commonly used requests to the unsober API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "49382810",
		"_collection_link": "https://tymko13-ab5c5fe7-8061895.postman.co/workspace/tymko13-ab5c5fe7's-Workspace~2ed52717-b966-4a0a-874d-f05a88d7998e/collection/49382810-f5142ebd-0a40-4da3-a907-c5ed4513177e?action=share&source=collection_link&creator=49382810"
	},
	"item": [
		{
			"name": "Unauthorised request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request without Authorization should return 401\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"jwtToken\", \"\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/course",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"course"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const token = response.token;\r",
							"pm.collectionVariables.set(\"jwtToken\", token);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"example@proton.me\",\r\n    \"password\": \"yanenazar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/auth/sign-in",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"auth",
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "Course Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"All courses have correct structure and types\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"\r",
							"    jsonData.forEach(course => {\r",
							"        pm.expect(course).to.have.property(\"id\").that.is.a(\"string\");\r",
							"        pm.expect(course).to.have.property(\"subject\").that.is.an(\"object\");\r",
							"        pm.expect(course).to.have.property(\"maxStudents\");\r",
							"        pm.expect(course).to.have.property(\"numEnrolled\").that.is.a(\"number\");\r",
							"        pm.expect(course).to.have.property(\"courseYear\").that.is.a(\"number\");\r",
							"\r",
							"        const subject = course.subject;\r",
							"        pm.expect(subject).to.have.property(\"id\").that.is.a(\"string\");\r",
							"        pm.expect(subject).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        pm.expect(subject).to.have.property(\"annotation\").that.is.a(\"string\");\r",
							"        pm.expect(subject).to.have.property(\"credits\").that.is.a(\"number\");\r",
							"        pm.expect(subject).to.have.property(\"term\").that.is.a(\"string\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/course",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"course"
					]
				}
			},
			"response": []
		},
		{
			"name": "Course by ID Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Course has correct structure and types\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"subject\").that.is.an(\"object\");\r",
							"    pm.expect(jsonData).to.have.property(\"maxStudents\");\r",
							"    pm.expect(jsonData).to.have.property(\"numEnrolled\").that.is.a(\"number\");\r",
							"    pm.expect(jsonData).to.have.property(\"courseYear\").that.is.a(\"number\");\r",
							"\r",
							"    const subject = jsonData.subject;\r",
							"    pm.expect(subject).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(subject).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    pm.expect(subject).to.have.property(\"annotation\").that.is.a(\"string\");\r",
							"    pm.expect(subject).to.have.property(\"credits\").that.is.a(\"number\");\r",
							"    pm.expect(subject).to.have.property(\"term\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Course has correct ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"courseId\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/course/{{courseId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"course",
						"{{courseId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Student Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"All students have correct structure and types\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"\r",
							"    jsonData.forEach(student => {\r",
							"        pm.expect(student).to.have.property(\"id\").that.is.a(\"string\");\r",
							"        pm.expect(student).to.have.property(\"firstName\").that.is.a(\"string\");\r",
							"        pm.expect(student).to.have.property(\"lastName\").that.is.a(\"string\");\r",
							"        pm.expect(student).to.have.property(\"patronymic\").that.is.a(\"string\");\r",
							"        pm.expect(student).to.have.property(\"recordBookNumber\").that.is.a(\"string\");\r",
							"        pm.expect(student).to.have.property(\"email\").that.is.a(\"string\");\r",
							"        pm.expect(student).to.have.property(\"specialty\"); \r",
							"        pm.expect(student).to.have.property(\"studyYear\").that.is.a(\"number\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/student",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "Student By ID Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Student response has correct structure and types\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"lastName\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"patronymic\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"recordBookNumber\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"specialty\");\r",
							"    pm.expect(jsonData).to.have.property(\"studyYear\").that.is.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Student response has correct ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"studentId\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/student/uuid/{{studentId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"student",
						"uuid",
						"{{studentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Student by Email Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Student response has correct structure and types\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"lastName\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"patronymic\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"recordBookNumber\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"specialty\");\r",
							"    pm.expect(jsonData).to.have.property(\"studyYear\").that.is.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Student response has correct email\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"studentEmail\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/student/email/{{studentEmail}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"student",
						"email",
						"{{studentEmail}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Subject Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is paginated\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"page\");\r",
							"    pm.expect(jsonData.page).to.have.property(\"size\").that.is.a(\"number\");\r",
							"    pm.expect(jsonData.page).to.have.property(\"number\").that.is.a(\"number\");\r",
							"    pm.expect(jsonData.page).to.have.property(\"totalElements\").that.is.a(\"number\");\r",
							"    pm.expect(jsonData.page).to.have.property(\"totalPages\").that.is.a(\"number\");\r",
							"    pm.expect(jsonData).to.have.property(\"content\");\r",
							"\r",
							"    pm.expect(jsonData.content).to.be.an(\"array\");\r",
							"    jsonData.content.forEach(subject => {\r",
							"        pm.expect(subject).to.have.property(\"id\").that.is.a(\"string\");\r",
							"        pm.expect(subject).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        pm.expect(subject).to.have.property(\"annotation\").that.is.a(\"string\");\r",
							"        pm.expect(subject).to.have.property(\"credits\").that.is.a(\"number\");\r",
							"        pm.expect(subject).to.have.property(\"term\").that.is.a(\"string\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/subject",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"subject"
					]
				}
			},
			"response": []
		},
		{
			"name": "Subject by ID Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Subject response has correct structure and types\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"annotation\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"credits\").that.is.a(\"number\");\r",
							"    pm.expect(jsonData).to.have.property(\"term\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Subject response has correct ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"subjectId\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/subject/{{subjectId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"subject",
						"{{subjectId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwtToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"if (pm.info.requestName !== \"Unauthorised request\") {\r",
					"    pm.test(\"Status code is 200\", function () {\r",
					"        pm.response.to.have.status(200);\r",
					"    });\r",
					"\r",
					"\r",
					"    pm.test(\"Content-Type is application/json\", function () {\r",
					"        pm.response.to.have.header(\"Content-Type\");\r",
					"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
					"    });\r",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": ""
		},
		{
			"key": "jwtToken",
			"value": ""
		},
		{
			"key": "courseId",
			"value": "49cc8666-d8ff-4b86-a884-e0500cd45daa"
		},
		{
			"key": "studentId",
			"value": "22b98129-dba1-41b7-b4eb-2adaa2c82479"
		},
		{
			"key": "studentEmail",
			"value": "example@proton.me"
		},
		{
			"key": "subjectId",
			"value": "fe295a2a-a3df-447c-b04b-04c3dcb22bbf"
		}
	]
}